#!/bin/sh

generate_query()
{
	python3 <<-EOF - "$@"
		import sys
		import os
		
		
		def unexpand_path(path):
		    return \
		        f"~{path[len(home_path):]}" \
		        if os.path.isabs(path) and os.path.commonpath((home_path, path)) == home_path \
		        else path
		
		
		def generate_quoted_paths(paths):
		    return (repr(unexpand_path(os.path.normpath(path))) for path in paths)
		
		
		home_path = os.path.expanduser("~")
		paths_specification = \
		    f".add_paths({', '.join(generate_quoted_paths(sys.argv[1:]))})" \
		    if len(sys.argv) > 1 \
		    else ""
		print(f"rg{paths_specification}.smart_case();;", end="")
	EOF
}

bat_command=$(command -v bat || command -v batcat || echo ":")
decode_field2="base32 --decode <<< {2}"
preview_command=$(
	cat <<-EOF
		if [ {1} = "match" ]
		then
		    file_path=\$($decode_field2)
		    realpath --relative-to=. --zero "\$file_path" | xargs -0 printf "file: %q\n"
		    $bat_command --color=always --style=numbers --highlight-line={4}:{6} "\$file_path"
		else
		    $decode_field2
		fi
	EOF
)
fzf --height=${FZF_HEIGHT:-0} \
    --disabled \
    --read0 \
    --delimiter=":" \
    --wrap \
    --ansi \
    --tabstop=4 \
    --highlight-line \
    --with-nth="7.." \
    --query="$(generate_query "$@")" \
    --preview="$preview_command" \
    --preview-window="top,~1,+{5}+1/2" \
    --bind="start:reload::" \
    --bind="enter:reload:rg-fzf-rg-wrapper.py {q}" \
    --bind="resize:refresh-preview" \
    --bind="ctrl-space:execute([ {1} = 'match' ] && $decode_field2 | xargs -0 nvim -c 'goto '{3}'|normal zz')" \
    --bind="ctrl-q:execute-silent([ {1} = 'match' ] && $decode_field2 | xargs -0 printf %q | kitty +kitten clipboard)" \
    --bind="ctrl-l:execute-silent([ {1} = 'match' ] && $decode_field2 | xargs -0I {} printf %s:%s {} {3} | kitty +kitten clipboard)" \
    --bind="home:first" \
    --bind="end:last" > /dev/null
